p = pf(q = f,df1 = k,df2 = n-k)
pvalue =append(pvalue,p)
}
for (m in 1:nrow(perm)){
new_d = perm[m,]*d
new_d.mean = matrix(apply(new_d,MARGIN = 2,FUN = mean))
t = t2(new_d,new_d.mean)
T2 = append(T2,t)
f = (n-k)/((n-1)*k)*t
F_dist = append(F_dist, f)
p = pf(q = f,df1 = k,df2 = n-k)
pvalue =append(pvalue,p)
}
T2
pvalue
T2
pvalue[16]
#with permutation
sum(T2>=T2[16])
#with permutation
sum(T2>=T2[16])/nrow(perm)
#with permutation
perm_p = sum(T2>=T2[16])/nrow(perm)
perm_p
# without permutation
original_p = pf(q = F_dist[16],df1 = k,df2 = n-k)
original_p
#the permutation distribution of paired T2
T2
#the permutation distribution of paired T2
order(T2)
#the permutation distribution of paired T2
hist(T2)
#the permutation distribution of paired T2
T2
#the permutation distribution of paired T2
T2[order(T2)]
?hotelling.test
data(container.df)
container''
container.df
data = rbind(s1,s2)
data
gp<-rep(1:2,c(4,4))
data<-cbind(data,gp)
data
result = hotelling.test(.~gp,data=data)
data=as.data.frame(data)
result = hotelling.test(.~gp,data=data)
result
result = hotelling.test(.~gp,data=data,pair=c(1,2))
result
pvalue
s1_mean = apply(s1,MARGIN = 2,FUN = mean)
s2_mean = apply(s2,MARGIN = 2,FUN = mean)
s1=matrix(data=c(72, 150,68, 145),nrow=2,byrow = TRUE)
s2 = matrix(data=c(69, 130,65, 120),nrow = 4,byrow=TRUE)
s1_mean = apply(s1,MARGIN = 2,FUN = mean)
s2_mean = apply(s2,MARGIN = 2,FUN = mean)
len_x = 2
len_y = 2
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
s1=matrix(data=c(72, 150,68, 145),nrow=2,byrow = TRUE)
s2 = matrix(data=c(69, 130,65, 120),nrow = 2,byrow=TRUE)
s1_mean = apply(s1,MARGIN = 2,FUN = mean)
s2_mean = apply(s2,MARGIN = 2,FUN = mean)
len_x = 2
len_y = 2
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
C_x
C_x-C_y
C_y
original_t_square = (len_x*len_y)/(len_y+len_x)* t((C_x-C_y)) %*% solve(C_xy) %*% (C_x-C_y)
C_xy
s1_mean
t((s1_mean-s2_mean))
t(s1_mean-s2_mean)
(s1_mean-s2_mean)
matrix(s1_mean-s2_mean)
original_t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
original_t_square
as.numeric(original_t_square)
k = 2
original_f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*numeric(original_t_square)
original_f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*as.numeric(original_t_square)
original_f
t2<-function(s1,s2,s1_mean,s2_mean){
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
t_square = as.numeric(original_t_square)
return(t_squre)
}
original_t_square = t2(s1,s2,s1_mean,s2_mean)
t2<-function(s1,s2,s1_mean,s2_mean){
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
t_square = as.numeric(t_square)
return(t_squre)
}
original_t_square = t2(s1,s2,s1_mean,s2_mean)
t2<-function(s1,s2,s1_mean,s2_mean){
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
t_square = as.numeric(t_square)
return(t_square)
}
original_t_square = t2(s1,s2,s1_mean,s2_mean)
x <-c(c(72, 150),c(68, 145),c(69, 130),c(65, 120))
x <-c(1,3,5,7)
?combinations
combinations(3,2,letters[1:3])
perm = combinations(n = 4,r = 2,v = x)
perm
y <-c(72, 150,68, 145,69, 130,65, 120)
perm = permutations(n = 2,r = 4,v = x)
perm = permutations(n = 2,r = 4,v = x,repeats.allowed = TRUE)
perm
perm = permutations(n = 4,r = 2,v = x,repeats.allowed = TRUE)
perm
perm = permutations(n = 4,r = 4,v = x,repeats.allowed = TRUE)
perm
perm = combn(x,4)
perm
perm = choose(x,4)
perm
perm = choose(x,2)*factorial(2)
perm
perm = permutations(n=4,2)
perm
perm = combinationstions(n=4,2)
perm = combinationstions(n=4,r=2)
perm = combinations(n=4,r=2)
perm
perm = 2*combinations(n=4,r=2)
perm
perm
perm = combinations(n=4,r=2)
perm
perm = *combinations(n=4,r=2)
perm = 2*combinations(n=4,r=2)
perm = *combinations(n=4,r=2)
perm
y(perm[1,])
y <- c(72, 150,68, 145,69, 130,65, 120)
y <- rbind(s1,s2)
y
perm = combinations(n=4,r=2)
oerm
perm
as.numeric(perm[1,])
y[as.numeric(perm[1,]),)
y([as.numeric(perm[1,]),)
y(as.numeric(perm[1,]),)
c(perm[1,])
y(c(perm[1,]),)
y[c(perm[1,]),]
y[c(-perm[z,]),]
y[c(-perm[1,]),]
T2 = NULL
for (z in 1:nrow(perm)){
s1 = y[c(perm[z,]),]
s2 = y[c(-perm[z,]),]
t = t2(s1,s2)
T2 = append(T2,t)
}
s1=matrix(data=c(72, 150,68, 145),nrow=2,byrow = TRUE)
s2 = matrix(data=c(69, 130,65, 120),nrow = 2,byrow=TRUE)
len_x = 2
len_y = 2
k = 2
t2<-function(s1,s2){
s1_mean = apply(s1,MARGIN = 2,FUN = mean)
s2_mean = apply(s2,MARGIN = 2,FUN = mean)
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
t_square = as.numeric(t_square)
return(t_square)
}
original_t_square = t2(s1,s2)
original_t_square
original_f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*as.numeric(original_t_square)
original_f
x <-c(1,3,5,7)
perm = combinations(n=4,r=2)
y <- rbind(s1,s2)
T2 = NULL
for (z in 1:nrow(perm)){
s1 = y[c(perm[z,]),]
s2 = y[c(-perm[z,]),]
t = t2(s1,s2)
T2 = append(T2,t)
}
T2
sum(T2>=original_t_square)/nrow(perm)
T2[order(T2)]
f_pvalue = df(original_f,df1 = k,df2 = len_x+len_y-k-1)
f_pvalue
original_f
# F-test respectively
original_f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*original_t_square
s1=matrix(data=c(72, 150,68, 145),nrow=2,byrow = TRUE)
s2 = matrix(data=c(69, 130,65, 120),nrow = 2,byrow=TRUE)
len_x = 2
len_y = 2
k = 2
t2<-function(s1,s2){
s1_mean = apply(s1,MARGIN = 2,FUN = mean)
s2_mean = apply(s2,MARGIN = 2,FUN = mean)
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
t_square = as.numeric(t_square)
return(t_square)
}
original_t_square = t2(s1,s2)
original_t_square
original_f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*original_t_square
original_f
# implement permutation test
x <-c(1,3,5,7)
perm = combinations(n=4,r=2)
y <- rbind(s1,s2)
T2 = NULL
F_dist = NULL
for (z in 1:nrow(perm)){
s1 = y[c(perm[z,]),]
s2 = y[c(-perm[z,]),]
t = t2(s1,s2)
T2 = append(T2,t)
f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*t
F_dist = append(F_dist,f)
}
# the permutation distribution of  T2
T2[order(T2)]
F_dist = (len_y+len_x-k-1)/((len_y+len_x-2)*k) * T2
F_dist
#p-values based on permutation T2 test
perm_p = sum(F_dist>=original_f)/nrow(perm)
perm_p
# F-test
f_pvalue = df(original_f,df1 = k,df2 = len_x+len_y-k-1)
f_pvalue
s1=matrix(data=c(72, 150,68, 145),nrow=2,byrow = TRUE)
s2 = matrix(data=c(69, 130,65, 120),nrow = 2,byrow=TRUE)
len_x = 2
len_y = 2
k = 2
t2<-function(s1,s2){
s1_mean = apply(s1,MARGIN = 2,FUN = mean)
s2_mean = apply(s2,MARGIN = 2,FUN = mean)
C_x = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
C_y = matrix(data = c(0,0,0,0),nrow=2,byrow=TRUE)
for (i in 1:2){
for (j in 1:2){
C_x[i,j]=sum((s1[,i]-s1_mean[i])*(s1[,j]-s1_mean[j]))/(len_x-1)
}
}
for (i in 1:2){
for (j in 1:2){
C_y[i,j]=sum((s2[,i]-s2_mean[i])*(s2[,j]-s2_mean[j]))/(len_y-1)
}
}
C_xy = ((len_x-1)*C_x+(len_y-1)*C_y)/(len_y+len_x-2)
t_square = (len_x*len_y)/(len_y+len_x)* t(matrix(s1_mean-s2_mean)) %*% solve(C_xy) %*% matrix(s1_mean-s2_mean)
t_square = as.numeric(t_square)
return(t_square)
}
# T2 and F-statistics
original_t_square = t2(s1,s2)
original_t_square
original_f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*original_t_square
original_f
# implement permutation test
x <-c(1,3,5,7)
perm = combinations(n=4,r=2)
y <- rbind(s1,s2)
T2 = NULL
F_dist = NULL
for (z in 1:nrow(perm)){
s1 = y[c(perm[z,]),]
s2 = y[c(-perm[z,]),]
t = t2(s1,s2)
T2 = append(T2,t)
f = (len_y+len_x-k-1)/((len_y+len_x-2)*k)*t
F_dist = append(F_dist,f)
}
# the permutation distribution of  T2
T2 = T2[order(T2)]
T2
F_dist = (len_y+len_x-k-1)/((len_y+len_x-2)*k) * T2
F_dist
#p-values based on permutation T2 test
perm_p = sum(F_dist>=original_f)/nrow(perm)
perm_p
# p-values based on original F-test
f_pvalue = df(original_f,df1 = k,df2 = len_x+len_y-k-1)
f_pvalue
library(ggfortify)
install.packages('ggfortify')
install.packages('survival')
library(ggfortify)
data(lung)
library("survminer")
install.packages('survminer')
library("survminer")
data("lung")
length(c( 95, 148, 170, 171, 176, 193, 200,221, 243, 261, 262, 263, 399, 414, 446))
treatment <-c(30, 67, 79, 82, 95, 148, 170, 171, 176, 193, 200,221, 243, 261, 262, 263, 399, 414, 446, 446, 464, 777)
treatment_state<-c(2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2)
data.frame(c(treatment,treatment_state))
?data.frame
data.frame(time = treatment,state = treatment_state)
cancer_treatment<-data.frame(time = treatment,state = treatment_state)
control_state <-rep(2,length(control))
control <-c(57, 58, 74, 79, 89, 98, 101, 104, 110, 118, 125, 132, 154159, 188, 203, 257, 257, 431, 461, 497, 723, 747, 1313, 2636)
control_state <-rep(2,length(control))
cancer_control<-data.frame(time = control,state = control_state)
cancer_treatment<-data.frame(time = treatment,state = treatment_state,treatment = 1)
cancer_control<-data.frame(time = control,state = control_state,treatment = 0)
cancer <- rbind(cancer_treatment,cancer_control)
head(cancer)
fit<-survfit(Surv(time, status) ~ treatment, data = cancer)
library("ggfortify")
library("survival")
library("survminer")
fit<-survfit(Surv(time, status) ~ treatment, data = cancer)
cancer_treatment<-data.frame(time = treatment,staus = treatment_state,treatment = 1)
cancer_control<-data.frame(time = control,status = control_state,treatment = 0)
cancer <- rbind(cancer_treatment,cancer_control)
cancer_treatment<-data.frame(time = treatment,status = treatment_state,treatment = 1)
cancer <- rbind(cancer_treatment,cancer_control)
head(cancer)
fit<-survfit(Surv(time, status) ~ treatment, data = cancer)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF")
)
surv_diff <- survdiff(Surv(time, status) ~ treatment, data = cancer)
surv_diff
summary(fit)
res.sum <- surv_summary(fit)
head(res.sum)
fit_treatment<-survfit(Surv(time, status) ~ 1, data = cancer)
ggsurvplot(fit_treatment,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF")
)
ggsurvplot(fit_treatment,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800")
)
ggsurvplot(fit_treatment,
pval = TRUE, conf.int = TRUE,
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800")
)
ggsurvplot(fit_treatment,pval = TRUE, conf.int = TRUE)
?ggsurvplot
ggsurvplot(fit_treatment,data = cancer,pval = TRUE, conf.int = TRUE,)
ggsurvplot(fit_treatment,data = cancer,pval = TRUE)
Surv(time, status)
Surv(treatment, treatment_state)
surv_summary(fit)
ggsurvplot(fit,data = cancer,pval = TRUE)
fit.coxph <- coxph(Surv(time, status) ~ treatment,
data = cancer)
ggforest(fit.coxph, data = cancer)
summary(fit.coxph)
a <-c(0, 7, 7, 14, 17, 17, 21, 21)
sd(a)
b<-c(2,4,5,5,6,8)
b<-c(2,4,5,5,6,8)
sd(b)
c<-c(3 , 7 , 4 , 6 , 5 , 9 , 7 , 4)
sd(c)
a <-c(14,19,19,10,20,14,11,10,12,13)
sd(a)
sum_x2=271
sum_x=39
ss=sum_x2-(sum_x)^2/6
ss
ss=800
n=16
ss/(n-1)
s_2=ss/(n-1)
s=s_2^(1/2)
s
a <-c(14,19,19,10,20,14,11,10,12,13)
sd(a)
b<-c(14,19,19,10,20,14,11,10,12,13,14,19,19,10,20,14,11,10,12,13)
sd(b)
a <-c(19,16,14,15,15,12,17,18,17,17)
var(a)
b<-c(20,14,16,18,13,19,16,17,19,17)
sort(b)
c<-5*3+4*4+18*12+10*9
c/(3+4+12+9)
c<-5/3+1+18/12+10/9
c
a <-c(15,16,18,20,13,15,16,18,17,21)
mean(a)
setwd('C:/Users/rui/Desktop/cu/fall2019/STAT5243/Project1-rc3208/data')
data <-load('processed_lyrics.RData')
data <-load('processed_lyrics.RData')
ls
ls()
d <- dt_lyrics
library(R.utils)
saveObject()
convert(data,source.dir = ".", target.dir = ".")
write.csv(data, file = "processed_lyrics.csv")
ls()
write.csv(dt_lyrics, ftile = "processed_lyrics.csv")
write.csv(dt_lyrics, file = "processed_lyrics.csv")
